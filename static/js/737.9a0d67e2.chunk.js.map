{"version":3,"file":"static/js/737.9a0d67e2.chunk.js","mappings":"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","sources":["components/button/button.component.tsx","components/button/button.styles.tsx","components/form-input/form-input.styles.tsx","components/form-input/form-input.component.tsx","components/sign-up-form/sign-up-form.styles.tsx","components/sign-up-form/sign-up-form.component.tsx","components/sign-in-form/sign-in-form.styles.tsx","components/sign-in-form/sign-in-form.component.tsx","routes/authentication/authentication.styles.tsx","routes/authentication/authentication.component.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["import { FC, ButtonHTMLAttributes } from 'react';\r\n\r\nimport {\r\n  BaseButton,\r\n  GoogleSignInButton,\r\n  InvertedButton,\r\n  ButtonSpinner,\r\n} from './button.styles';\r\n\r\nexport enum BUTTON_TYPE_CLASSES {\r\n  base = 'base',\r\n  google = 'google-sign-in',\r\n  inverted = 'inverted',\r\n}\r\n\r\nconst getButton = (buttonType = BUTTON_TYPE_CLASSES.base): typeof BaseButton =>\r\n  ({\r\n    [BUTTON_TYPE_CLASSES.base]: BaseButton,\r\n    [BUTTON_TYPE_CLASSES.google]: GoogleSignInButton,\r\n    [BUTTON_TYPE_CLASSES.inverted]: InvertedButton,\r\n  }[buttonType]);\r\n\r\nexport type ButtonProps = {\r\n  buttonType?: BUTTON_TYPE_CLASSES;\r\n  isLoading?: boolean;\r\n} & ButtonHTMLAttributes<HTMLButtonElement>;\r\n\r\nconst Button: FC<ButtonProps> = ({\r\n  children,\r\n  buttonType,\r\n  isLoading,\r\n  ...otherProps\r\n}) => {\r\n  const CustomButton = getButton(buttonType);\r\n\r\n  return (\r\n    <CustomButton disabled={isLoading} {...otherProps}>\r\n      {isLoading ? <ButtonSpinner /> : children}\r\n    </CustomButton>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import styled from 'styled-components';\r\n\r\nimport { SpinnerContainer } from '../spinner/spinner.styles';\r\n\r\nexport const BaseButton = styled.button`\r\n  min-width: 165px;\r\n  width: auto;\r\n  height: 50px;\r\n  letter-spacing: 0.5px;\r\n  line-height: 50px;\r\n  padding: 0 35px 0 35px;\r\n  font-size: 15px;\r\n  font-weight: 100;\r\n  background-color: black;\r\n  color: white;\r\n  text-transform: uppercase;\r\n  font-family: 'Open Sans';\r\n  border: none;\r\n  cursor: pointer;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  &:hover {\r\n    background-color: white;\r\n    color: black;\r\n    border: 1px solid black;\r\n  }\r\n`;\r\n\r\nexport const GoogleSignInButton = styled(BaseButton)`\r\n  background-color: #4285f4;\r\n  color: white;\r\n\r\n  &:hover {\r\n    background-color: #357ae8;\r\n    border: none;\r\n  }\r\n`;\r\n\r\nexport const InvertedButton = styled(BaseButton)`\r\n  background-color: white;\r\n  color: black;\r\n  border: 1px solid black;\r\n\r\n  &:hover {\r\n    background-color: black;\r\n    color: white;\r\n    border: none;\r\n  }\r\n`;\r\n\r\nexport const ButtonSpinner = styled(SpinnerContainer)`\r\n  width: 30px;\r\n  height: 30px;\r\n`;\r\n","import styled, { css } from 'styled-components';\r\n\r\nconst subColor = 'grey';\r\nconst mainColor = 'black';\r\n\r\nconst shrinkLabelStyles = css`\r\n  top: -14px;\r\n  font-size: 12px;\r\n  color: ${mainColor};\r\n`;\r\n\r\ntype FormInputLabelProps = {\r\n  shrink?: boolean;\r\n};\r\n\r\nexport const FormInputLabel = styled.label<FormInputLabelProps>`\r\n  color: ${subColor};\r\n  font-size: 16px;\r\n  font-weight: normal;\r\n  position: absolute;\r\n  pointer-events: none;\r\n  left: 5px;\r\n  top: 10px;\r\n  transition: 300ms ease all;\r\n\r\n  ${({ shrink }) => shrink && shrinkLabelStyles}\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  background: none;\r\n  background-color: white;\r\n  color: ${subColor};\r\n  font-size: 18px;\r\n  padding: 10px 10px 10px 5px;\r\n  display: block;\r\n  width: 100%;\r\n  border: none;\r\n  border-radius: 0;\r\n  border-bottom: 1px solid ${subColor};\r\n  margin: 25px 0;\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n\r\n  &:focus ~ ${FormInputLabel} {\r\n    ${shrinkLabelStyles};\r\n  }\r\n`;\r\n\r\nexport const Group = styled.div`\r\n  position: relative;\r\n  margin: 45px 0;\r\n\r\n  input[type='password'] {\r\n    letter-spacing: 0.3em;\r\n  }\r\n`;\r\n","import { InputHTMLAttributes, FC } from 'react';\r\n\r\nimport { FormInputLabel, Input, Group } from './form-input.styles';\r\n\r\ntype FormInputProps = {\r\n  label: string;\r\n} & InputHTMLAttributes<HTMLInputElement>;\r\n\r\nconst FormInput: FC<FormInputProps> = ({ label, ...otherProps }) => {\r\n  return (\r\n    <Group>\r\n      <Input {...otherProps} />\r\n      {label && (\r\n        <FormInputLabel\r\n          shrink={Boolean(\r\n            otherProps &&\r\n              typeof otherProps.value === 'string' &&\r\n              otherProps.value.length\r\n          )}\r\n        >\r\n          {label}\r\n        </FormInputLabel>\r\n      )}\r\n    </Group>\r\n  );\r\n};\r\n\r\nexport default FormInput;\r\n","import styled from 'styled-components';\r\n\r\nexport const SignUpContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 380px;\r\n\r\n  h2 {\r\n    margin: 10px 0;\r\n  }\r\n\r\n  @media (max-width: 470px) {\r\n    width: 90%;\r\n  }\r\n`;\r\n\r\nexport const SignUpButtonContainer = styled.div`\r\n  @media (max-width: 470px) {\r\n    width: 80%;\r\n    margin: 0 auto;\r\n\r\n    & button {\r\n      width: 100%;\r\n    }\r\n  }\r\n`;\r\n","import { useState, FormEvent, ChangeEvent } from 'react';\r\nimport { AuthError, AuthErrorCodes } from 'firebase/auth';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport FormInput from '../form-input/form-input.component';\r\nimport Button from '../button/button.component';\r\n\r\nimport { signUpStart } from '../../store/user/user.action';\r\n\r\nimport { SignUpContainer, SignUpButtonContainer } from './sign-up-form.styles';\r\n\r\nconst defaultFormFields = {\r\n  displayName: '',\r\n  email: '',\r\n  password: '',\r\n  confirmPassword: '',\r\n};\r\n\r\nconst SignUpForm = () => {\r\n  const [formFields, setFormFields] = useState(defaultFormFields);\r\n  const { displayName, email, password, confirmPassword } = formFields;\r\n  const dispatch = useDispatch();\r\n\r\n  const resetFormFields = () => {\r\n    setFormFields(defaultFormFields);\r\n  };\r\n\r\n  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n\r\n    if (password !== confirmPassword) {\r\n      alert('Passwords do not match!');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      dispatch(signUpStart(email, password, displayName));\r\n      resetFormFields();\r\n    } catch (error) {\r\n      if ((error as AuthError).code === AuthErrorCodes.EMAIL_EXISTS) {\r\n        alert('Cannot create user, email already in use!');\r\n      } else {\r\n        console.log('User creation encountered an error', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n\r\n    setFormFields({ ...formFields, [name]: value });\r\n  };\r\n\r\n  return (\r\n    <SignUpContainer>\r\n      <h2>Don't have an account?</h2>\r\n      <span>Sign up with your email and password</span>\r\n      <form onSubmit={handleSubmit}>\r\n        <FormInput\r\n          label=\"Display Name\"\r\n          type=\"text\"\r\n          required\r\n          onChange={handleChange}\r\n          name=\"displayName\"\r\n          value={displayName}\r\n        />\r\n\r\n        <FormInput\r\n          label=\"Email\"\r\n          type=\"email\"\r\n          required\r\n          onChange={handleChange}\r\n          name=\"email\"\r\n          value={email}\r\n        />\r\n\r\n        <FormInput\r\n          label=\"Password\"\r\n          type=\"password\"\r\n          required\r\n          onChange={handleChange}\r\n          name=\"password\"\r\n          value={password}\r\n        />\r\n\r\n        <FormInput\r\n          label=\"Confirm Password\"\r\n          type=\"password\"\r\n          required\r\n          onChange={handleChange}\r\n          name=\"confirmPassword\"\r\n          value={confirmPassword}\r\n        />\r\n        <SignUpButtonContainer>\r\n          <Button type=\"submit\">Sign Up</Button>\r\n        </SignUpButtonContainer>\r\n      </form>\r\n    </SignUpContainer>\r\n  );\r\n};\r\n\r\nexport default SignUpForm;\r\n","import styled from 'styled-components';\r\n\r\nexport const SignInContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 380px;\r\n\r\n  h2 {\r\n    margin: 10px 0;\r\n  }\r\n\r\n  @media (max-width: 470px) {\r\n    width: 90%;\r\n  }\r\n`;\r\n\r\nexport const ButtonsContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  @media (max-width: 470px) {\r\n    flex-direction: column;\r\n    width: 80%;\r\n    margin: 0 auto;\r\n    gap: 20px;\r\n  }\r\n`;\r\n","import { useState, FormEvent, ChangeEvent } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport FormInput from '../form-input/form-input.component';\r\nimport Button, { BUTTON_TYPE_CLASSES } from '../button/button.component';\r\n\r\nimport {\r\n  googleSignInStart,\r\n  emailSignInStart,\r\n} from '../../store/user/user.action';\r\n\r\nimport { SignInContainer, ButtonsContainer } from './sign-in-form.styles';\r\n\r\nconst defaultFormFields = {\r\n  email: '',\r\n  password: '',\r\n};\r\n\r\nconst SignInForm = () => {\r\n  const dispatch = useDispatch();\r\n  const [formFields, setFormFields] = useState(defaultFormFields);\r\n  const { email, password } = formFields;\r\n\r\n  const resetFormFields = () => {\r\n    setFormFields(defaultFormFields);\r\n  };\r\n\r\n  const signInWithGoogle = async () => {\r\n    dispatch(googleSignInStart());\r\n  };\r\n\r\n  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      dispatch(emailSignInStart(email, password));\r\n      resetFormFields();\r\n    } catch (error) {\r\n      console.log('User sign-in failed', error);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n\r\n    setFormFields({ ...formFields, [name]: value });\r\n  };\r\n\r\n  return (\r\n    <SignInContainer>\r\n      <h2>Already have an account?</h2>\r\n      <span>Sign in with your email and password</span>\r\n      <form onSubmit={handleSubmit}>\r\n        <FormInput\r\n          label=\"Email\"\r\n          type=\"email\"\r\n          required\r\n          onChange={handleChange}\r\n          name=\"email\"\r\n          value={email}\r\n        />\r\n\r\n        <FormInput\r\n          label=\"Password\"\r\n          type=\"password\"\r\n          required\r\n          onChange={handleChange}\r\n          name=\"password\"\r\n          value={password}\r\n        />\r\n\r\n        <ButtonsContainer>\r\n          <Button type=\"submit\">Sign In</Button>\r\n          <Button\r\n            type=\"button\"\r\n            buttonType={BUTTON_TYPE_CLASSES.google}\r\n            onClick={signInWithGoogle}\r\n          >\r\n            Google Sign In\r\n          </Button>\r\n        </ButtonsContainer>\r\n      </form>\r\n    </SignInContainer>\r\n  );\r\n};\r\n\r\nexport default SignInForm;\r\n","import styled from 'styled-components';\r\n\r\nexport const AuthenticationContainer = styled.div`\r\n  display: flex;\r\n  width: 900px;\r\n  justify-content: space-between;\r\n  margin: 30px auto;\r\n\r\n  @media (max-width: 1100px) {\r\n    justify-content: space-evenly;\r\n  }\r\n\r\n  @media (max-width: 900px) {\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 60px;\r\n    width: 100%;\r\n  }\r\n`;\r\n","import SignUpForm from '../../components/sign-up-form/sign-up-form.component';\r\nimport SignInForm from '../../components/sign-in-form/sign-in-form.component';\r\n\r\nimport { AuthenticationContainer } from './authentication.styles';\r\n\r\nconst Authentication = () => {\r\n  return (\r\n    <AuthenticationContainer>\r\n      <SignInForm />\r\n      <SignUpForm />\r\n    </AuthenticationContainer>\r\n  );\r\n};\r\n\r\nexport default Authentication;\r\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}"],"names":["BUTTON_TYPE_CLASSES","children","buttonType","isLoading","otherProps","CustomButton","base","BaseButton","google","GoogleSignInButton","inverted","InvertedButton","getButton","disabled","styled","ButtonSpinner","SpinnerContainer","subColor","shrinkLabelStyles","css","FormInputLabel","shrink","Input","Group","label","Boolean","value","length","SignUpContainer","SignUpButtonContainer","defaultFormFields","displayName","email","password","confirmPassword","useState","formFields","setFormFields","dispatch","useDispatch","handleSubmit","e","preventDefault","alert","signUpStart","error","code","AuthErrorCodes","console","log","handleChange","target","name","onSubmit","type","required","onChange","SignInContainer","ButtonsContainer","signInWithGoogle","googleSignInStart","emailSignInStart","onClick","AuthenticationContainer","_objectWithoutProperties","source","excluded","key","i","Object","getOwnPropertySymbols","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","call"],"sourceRoot":""}